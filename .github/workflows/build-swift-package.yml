name: XCFramework and SPM Release

on:
  push:
    tags: 
      - 'v*'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode'
        required: false
        default: false
        type: boolean
      version_tag:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0-test'
        type: string

env:
  FRAMEWORK_NAME: "ContextRuntime"
  SPM_REPO: "jethro-djan/ContextRuntime-SP"  # CHANGE THIS

permissions:
  contents: write

jobs:
  build_xcframework:
    runs-on: macos-latest
    outputs:
      version: ${{ steps.setup.outputs.VERSION }}
      checksum: ${{ steps.checksum.outputs.CHECKSUM }}
      test_mode: ${{ steps.setup.outputs.TEST_MODE }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        id: setup
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ inputs.version_tag }}" >> $GITHUB_OUTPUT
            echo "TEST_MODE=${{ inputs.test_mode }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
            echo "TEST_MODE=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust targets
        run: |
          rustup target add aarch64-apple-ios x86_64-apple-ios aarch64-apple-ios-sim

      - name: Build Rust libraries
        run: |
          # Clean previous builds
          cargo clean
          
          # Build with explicit library output
          cargo build --lib --release --target aarch64-apple-ios
          cargo build --lib --release --target x86_64-apple-ios
          cargo build --lib --release --target aarch64-apple-ios-sim
          
          # Debug: Find the actual library name
          echo "Built libraries:"
          find target -name "*.a" -exec ls -la {} \;
          
          # Get the first static library found (should match your crate name)
          LIB_PATH=$(find target -name "*.a" | grep release | head -1)
          LIB_NAME=$(basename $LIB_PATH)
          echo "Detected library name: $LIB_NAME"
          echo "LIB_NAME=$LIB_NAME" >> $GITHUB_ENV
          
          # Create universal lib using detected name
          mkdir -p target/universal-ios-sim/release
          lipo -create \
            "target/x86_64-apple-ios/release/$LIB_NAME" \
            "target/aarch64-apple-ios-sim/release/$LIB_NAME" \
            -output "target/universal-ios-sim/release/$LIB_NAME"

      - name: Generate UniFFI bindings
        run: |
          cargo run --bin uniffi-bindgen generate \
            --library target/aarch64-apple-ios/release/${{ env.LIB_NAME }} \
            --language swift \
            --out-dir out

      - name: Create XCFramework
        run: |
          mkdir -p xcframework/Headers
          cp out/*.h xcframework/Headers/
          xcodebuild -create-xcframework \
            -library target/aarch64-apple-ios/release/${{ env.LIB_NAME }} \
            -headers xcframework/Headers \
            -library target/universal-ios-sim/release/${{ env.LIB_NAME }} \
            -headers xcframework/Headers \
            -output ${{ env.FRAMEWORK_NAME }}.xcframework
          zip -r ${{ env.FRAMEWORK_NAME }}.xcframework.zip ${{ env.FRAMEWORK_NAME }}.xcframework

      - name: Calculate checksum
        id: checksum
        run: |
          CHECKSUM=$(swift package compute-checksum ${{ env.FRAMEWORK_NAME }}.xcframework.zip)
          echo "CHECKSUM=$CHECKSUM" >> $GITHUB_OUTPUT
          echo "Checksum: $CHECKSUM"

      - name: Generate Package.swift
        run: |
          cat > Package.swift <<EOF
          // swift-tools-version:5.9
          import PackageDescription
          
          let package = Package(
              name: "${{ env.FRAMEWORK_NAME }}",
              platforms: [.iOS(.v16)],
              products: [.library(name: "${{ env.FRAMEWORK_NAME }}", targets: ["${{ env.FRAMEWORK_NAME }}"])],
              targets: [
                  .binaryTarget(
                      name: "${{ env.FRAMEWORK_NAME }}",
                      url: "https://github.com/${{ env.SPM_REPO }}/releases/download/${{ steps.setup.outputs.VERSION }}/${{ env.FRAMEWORK_NAME }}.xcframework.zip",
                      checksum: "${{ steps.checksum.outputs.CHECKSUM }}"
                  )
              ]
          )
          EOF

      - name: Verify files exist
        run: |
          echo "Checking for required files..."
          ls -la
          if [ ! -f "${{ env.FRAMEWORK_NAME }}.xcframework.zip" ]; then
            echo "❌ XCFramework zip file not found!"
            exit 1
          fi
          if [ ! -f "Package.swift" ]; then
            echo "❌ Package.swift file not found!"
            exit 1
          fi
          echo "✅ All required files exist"

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          cp "${{ env.FRAMEWORK_NAME }}.xcframework.zip" artifacts/
          cp Package.swift artifacts/
          echo "Artifacts prepared for ${{ steps.setup.outputs.TEST_MODE == 'true' && 'local testing' || 'release' }}"

      # Only upload artifacts in CI (not in act)
      - name: Upload artifacts (CI only)
        if: runner.os != 'Linux' && steps.setup.outputs.TEST_MODE == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: xcframework-artifacts
          path: artifacts/*

  publish_spm:
    needs: build_xcframework
    runs-on: macos-latest
    steps:
      - name: Download artifacts
        if: runner.os != 'Linux' && needs.build_xcframework.outputs.test_mode == 'false'
        uses: actions/download-artifact@v4
        with:
          name: xcframework-artifacts
          path: artifacts

      - name: Checkout SPM repo (CI only)
        if: runner.os != 'Linux' && needs.build_xcframework.outputs.test_mode == 'false'
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SPM_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: spm-repo

      # For local testing, just show what would happen
      - name: Simulate SPM publish (local)
        if: runner.os == 'Linux' || needs.build_xcframework.outputs.test_mode == 'true'
        run: |
          echo "Would publish to SPM repo:"
          echo "Version: ${{ needs.build_xcframework.outputs.version }}"
          echo "Checksum: ${{ needs.build_xcframework.outputs.checksum }}"
          if [ -d "artifacts" ]; then
            ls -la artifacts/
          else
            echo "No artifacts directory found (expected in local testing)"
          fi

      # Real publish for CI
      - name: Publish to SPM repo (CI)
        if: runner.os != 'Linux' && needs.build_xcframework.outputs.test_mode == 'false'
        run: |
          cd spm-repo
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          if [ ! -f Package.swift ]; then
            swift package init --type empty
            rm -rf Sources Tests
          fi
          
          cp ../artifacts/Package.swift .
          swift package init --type library
          git add .
          git commit -m "Release ${{ needs.build_xcframework.outputs.version }}"
          git tag ${{ needs.build_xcframework.outputs.version }}
          git push origin main --tags

  release:
    needs: [build_xcframework, publish_spm]
    runs-on: ubuntu-latest
    if: needs.build_xcframework.outputs.test_mode == 'false'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: xcframework-artifacts
          path: artifacts

      - name: Checkout SPM repo for release
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SPM_REPO }}
          token: ${{ secrets.GH_TOKEN }}

      - uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          files: artifacts/${{ env.FRAMEWORK_NAME }}.xcframework.zip
