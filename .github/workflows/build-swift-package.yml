name: XCFramework and SPM Release

on:
  push:
    tags: 
      - 'v*'
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0-test'
        type: string

env:
  SWIFT_PACKAGE_NAME: "ContextRuntime"
  SPM_REPO: "jethro-djan/ContextRuntime-SP"
  XCFRAMEWORK_NAME: "ContextRuntimeFFI"

permissions:
  contents: write

jobs:
  build_and_release:
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        id: setup
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ inputs.version_tag }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-swift
        run: cargo install cargo-swift

      - name: Build Swift package with cargo-swift
        run: |
          cargo swift package \
            --name ${{ env.SWIFT_PACKAGE_NAME }} \
            --xcframework-name ${{ env.XCFRAMEWORK_NAME }} \
            --platforms ios \
            --release

      - name: Zip XCFramework
        run: |
          cd ${{ env.SWIFT_PACKAGE_NAME }}
          zip -r ../${{ env.XCFRAMEWORK_NAME }}.xcframework.zip ${{ env.XCFRAMEWORK_NAME }}.xcframework

      - name: Checkout SPM repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SPM_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: spm-repo

      - name: Prepare SPM release
        id: package
        run: |
          cd spm-repo
          
          # Clean existing content (except .git)
          find . -path ./.git -prune -o -exec rm -rf {} + 2>/dev/null || true
          
          # Copy Swift package sources and manifest
          cp -R ../${{ env.SWIFT_PACKAGE_NAME }}/Sources .
          cp ../${{ env.SWIFT_PACKAGE_NAME }}/Package.swift .
          
          # Calculate checksum for the XCFramework zip
          CHECKSUM=$(swift package compute-checksum ../${{ env.XCFRAMEWORK_NAME }}.xcframework.zip)
          echo "CHECKSUM=$CHECKSUM" >> $GITHUB_OUTPUT
          
          # Update Package.swift to reference the remote XCFramework
          sed -i '' -e "s|\.binaryTarget(name: \".*\", path: \".*\"|.binaryTarget(name: \"${{ env.XCFRAMEWORK_NAME }}\", url: \"https://github.com/${{ env.SPM_REPO }}/releases/download/${{ steps.setup.outputs.VERSION }}/${{ env.XCFRAMEWORK_NAME }}.xcframework.zip\", checksum: \"$CHECKSUM\"|" Package.swift

      - name: Commit and push to SPM repo
        run: |
          cd spm-repo
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add --all
          git commit -m "Release ${{ steps.setup.outputs.VERSION }}"
          git tag ${{ steps.setup.outputs.VERSION }}
          git push origin main
          git push origin ${{ steps.setup.outputs.VERSION }}

      - name: Create GitHub release with XCFramework
        run: |
          gh release create "${{ steps.setup.outputs.VERSION }}" \
            ../${{ env.XCFRAMEWORK_NAME }}.xcframework.zip \
            --title "${{ env.SWIFT_PACKAGE_NAME }} ${{ steps.setup.outputs.VERSION }}" \
            --notes "Automated release of ${{ env.SWIFT_PACKAGE_NAME }} Swift package with ${{ env.XCFRAMEWORK_NAME }} XCFramework" \
            --repo "${{ env.SPM_REPO }}"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Verify release
        run: |
          echo "‚úÖ Release created successfully!"
          echo "üì¶ Swift Package: ${{ env.SWIFT_PACKAGE_NAME }}"
          echo "üîß XCFramework: ${{ env.XCFRAMEWORK_NAME }}"
          echo "üè∑Ô∏è  Version: ${{ steps.setup.outputs.VERSION }}"
          echo "üîó Repository: https://github.com/${{ env.SPM_REPO }}"
          echo "üìã Checksum: ${{ steps.package.outputs.CHECKSUM }}"
