name: Release iOS XCFramework

on:
  push:
    tags: 
      - 'v*'  # Trigger on version tags (e.g., v1.0.0)
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (skip validation)'
        required: false
        default: 'false'
        type: boolean
      version_tag:
        description: 'Version tag to simulate (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0-test'
        type: string

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest
    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v4

      # Step 2: Set up environment variables for testing
      - name: Setup test environment
        id: setup
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.test_mode }}" == "true" ]]; then
              echo "TEST_MODE=true" >> $GITHUB_OUTPUT
              echo "VERSION=${{ github.event.inputs.version_tag }}" >> $GITHUB_OUTPUT
              echo "Running in TEST MODE with version: ${{ github.event.inputs.version_tag }}"
            else
              echo "TEST_MODE=false" >> $GITHUB_OUTPUT
              echo "VERSION=${{ github.event.inputs.version_tag }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "TEST_MODE=false" >> $GITHUB_OUTPUT
            echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi

      # Step 3: Validate version format (skip in test mode)
      - name: Validate version format
        id: validate-version
        run: |
          VERSION="${{ steps.setup.outputs.VERSION }}"
          
          if [[ "${{ steps.setup.outputs.TEST_MODE }}" == "true" ]]; then
            echo "⚠️ SKIPPING validation in test mode"
            echo "VERSION_VALIDATED=$VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Normal validation for real runs
          if [[ "${GITHUB_REF_TYPE}" != "tag" && "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "::error::This workflow should only run on tags, but GITHUB_REF_TYPE is: ${GITHUB_REF_TYPE}"
            exit 1
          fi
          
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Version must match 'vX.Y.Z' (e.g., v1.0.0). Got: $VERSION"
            exit 1
          fi
          echo "VERSION_VALIDATED=$VERSION" >> $GITHUB_OUTPUT
          echo "Valid version tag: $VERSION"

      - name: Install Rust targets
        run: |
          rustup target add aarch64-apple-ios x86_64-apple-ios aarch64-apple-ios-sim

      - name: Add UniFFI
        run: cargo add uniffi  

      - name: Build Rust libraries
        run: |
          # 1. Build all targets
          cargo build --release --target aarch64-apple-ios
          cargo build --release --target x86_64-apple-ios
          cargo build --release --target aarch64-apple-ios-sim
          
          # 2. Create directory structure FIRST
          mkdir -p target/universal-ios-sim/release
          
          # 3. Then run lipo
          lipo -create \
            target/x86_64-apple-ios/release/libcontext_runtime.a \
            target/aarch64-apple-ios-sim/release/libcontext_runtime.a \
            -output target/universal-ios-sim/release/libcontext_runtime.a
          
          # 4. Verify output
          file target/universal-ios-sim/release/libcontext_runtime.a

      - name: Inspect target directory
        run: |
          echo "=== Target directory structure ==="
          find target -type f -name "*.a" | grep -i context_runtime
          echo "================================"

      - name: Generate UniFFI bindings
        run: |
          cargo run --bin uniffi-bindgen generate --library target/aarch64-apple-ios/release/libcontext_runtime.a --language swift --out-dir out
          cargo run --bin uniffi-bindgen-swift -- target/aarch64-apple-ios/release/libcontext_runtime.a build/swift/Modules --xcframework --modulemap --modulemap-filename context.modulemap

      - name: Create XCFramework
        run: |
          mkdir -p xcframework/Headers
          cp out/*.h xcframework/Headers/
          cp out/*.modulemap xcframework/Headers/
          xcodebuild -create-xcframework \
              -library target/aarch64-apple-ios/release/libcontext_runtime.a \
              -headers xcframework/Headers \
              -library target/universal-ios-sim/release/libcontext_runtime.a \
              -headers xcframework/Headers \
              -output ContextRuntime.xcframework
          mkdir -p ContextRuntime.xcframework/swift-interfaces
          cp out/*.swift ContextRuntime.xcframework/swift-interfaces/

      - name: Zip XCFramework
        run: zip -r ContextRuntime.xcframework.zip ContextRuntime.xcframework

      # Generate checksum properly
      - name: Generate checksum
        id: checksum
        run: |
          CHECKSUM=$(swift package compute-checksum ContextRuntime.xcframework.zip)
          echo "CHECKSUM=$CHECKSUM" >> $GITHUB_OUTPUT
          echo "Generated checksum: $CHECKSUM"

      # Create root Package.swift
      - name: Generate Package.swift
        run: |
          VERSION="${{ steps.setup.outputs.VERSION }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          
          if [[ "${{ steps.setup.outputs.TEST_MODE }}" == "true" ]]; then
            REPO_URL="https://github.com/YOUR_USERNAME/YOUR_REPO"
          fi
          
          cat > Package.swift <<EOF
          // swift-tools-version:5.9
          import PackageDescription
          
          let package = Package(
              name: "ContextRuntime",
              platforms: [.iOS(.v16)],
              products: [.library(name: "ContextRuntime", targets: ["ContextRuntime"])],
              targets: [
                  .binaryTarget(
                      name: "ContextRuntime",
                      url: "${REPO_URL}/releases/download/${VERSION}/ContextRuntime.xcframework.zip",
                      checksum: "${{ steps.checksum.outputs.CHECKSUM }}"
                  )
              ]
          )
          EOF

      # Save Package.swift for later commit
      - name: Persist Package.swift
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: Package.swift
          path: Package.swift

      - name: Upload Release Assets
        if: steps.setup.outputs.TEST_MODE == 'false'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ContextRuntime.xcframework.zip

      - name: Test mode summary
        if: steps.setup.outputs.TEST_MODE == 'true'
        run: |
          echo "🧪 TEST MODE COMPLETED SUCCESSFULLY!"
          echo "Generated files:"
          ls -la ContextRuntime.xcframework.zip Package.swift 2>/dev/null || echo "Files not found"
          echo "Checksum: ${{ steps.checksum.outputs.CHECKSUM }}"
          echo "Version: ${{ steps.setup.outputs.VERSION }}"

  commit_package:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main 
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Package.swift
        uses: actions/download-artifact@v4
        with:
          name: Package.swift
          path: .

      - name: Commit and push
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add Package.swift
          git commit -m "chore: Add Package.swift for SPM support [auto-generated]"
          git push
