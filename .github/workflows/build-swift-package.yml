name: XCFramework and SPM Release

on:
  push:
    tags: 
      - 'v*'
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0-test'
        type: string

env:
  PACKAGE_NAME: "ContextRuntime"
  XCFRAMEWORK_NAME: "ContextFFI"
  SPM_REPO: "jethro-djan/ContextRuntime-SP"

permissions:
  contents: write

jobs:
  build_and_release:
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        id: setup
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ inputs.version_tag }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi
          echo "PACKAGE_NAME=${{ env.PACKAGE_NAME }}" >> $GITHUB_ENV
          echo "XCFRAMEWORK_NAME=${{ env.XCFRAMEWORK_NAME }}" >> $GITHUB_ENV

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-swift
        run: |
          # Install non-interactively by setting CARGO_TERM_COLOR=never
          CARGO_TERM_COLOR=never cargo install cargo-swift

      - name: Install required targets
        run: |
          rustup target add aarch64-apple-ios x86_64-apple-ios aarch64-apple-ios-sim

      - name: Build package with cargo-swift
        run: |
          cargo swift package \
            --name ${{ env.PACKAGE_NAME }} \
            --xcframework-name ${{ env.XCFRAMEWORK_NAME }} \
            --platforms ios \
            --release \
            --silent

      - name: Zip XCFramework
        run: |
          cd ${{ env.PACKAGE_NAME }}
          zip -r ../${{ env.XCFRAMEWORK_NAME }}.xcframework.zip ${{ env.XCFRAMEWORK_NAME }}.xcframework

      - name: Checkout SPM repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SPM_REPO }}
          token: ${{ secrets.GH_TOKEN }}
          path: spm-repo

      - name: Prepare SPM repo (Full cleanup)
        id: package
        run: |
          cd spm-repo
          
          # COMPLETE cleanup except .git
          find . -path ./.git -prune -o -exec rm -rf {} + 2>/dev/null || true
          
          # Copy ONLY the essential files
          mkdir -p Sources/${{ env.PACKAGE_NAME }}
          cp -R ../${{ env.PACKAGE_NAME }}/Sources/${{ env.PACKAGE_NAME }}/* Sources/${{ env.PACKAGE_NAME }}/
          cp ../${{ env.PACKAGE_NAME }}/Package.swift .
          
          # Ensure no XCFramework files remain
          rm -rf *.xcframework || true
          
          CHECKSUM=$(swift package compute-checksum ../${{ env.XCFRAMEWORK_NAME }}.xcframework.zip)
          echo "CHECKSUM=$CHECKSUM" >> $GITHUB_OUTPUT
          
          sed -i '' -e "s|path: \"./${{ env.XCFRAMEWORK_NAME }}.xcframework\"|url: \"https://github.com/${{ env.SPM_REPO }}/releases/download/${{ steps.setup.outputs.VERSION }}/${{ env.XCFRAMEWORK_NAME }}.xcframework.zip\", checksum: \"$CHECKSUM\"|" Package.swift

      - name: Commit and push to SPM repo
        run: |
          cd spm-repo
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add --all
          git commit -m "Release ${{ steps.setup.outputs.VERSION }}"
          git tag ${{ steps.setup.outputs.VERSION }}
          git push origin main
          git push origin ${{ steps.setup.outputs.VERSION }}

      - name: Create GitHub release
        run: |
          gh release create "${{ steps.setup.outputs.VERSION }}" \
            ../${{ env.XCFRAMEWORK_NAME }}.xcframework.zip \
            --title "${{ env.PACKAGE_NAME }} ${{ steps.setup.outputs.VERSION }}" \
            --notes "Automated release" \
            --repo "${{ env.SPM_REPO }}"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Clean main repo artifacts
        run: |
          # Keep only the Package.swift and Sources
          git reset --hard
          git clean -fd
          git checkout -- Package.swift Sources/
          
          # Optional: Commit if anything changed
          git add Package.swift Sources/
          if ! git diff-index --quiet HEAD --; then
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git commit -m "Clean up after release ${{ steps.setup.outputs.VERSION }}"
            git push origin main
          fi

      - name: Verify release
        run: |
          echo "‚úÖ Release created successfully!"
          echo "üì¶ Package: ${{ env.PACKAGE_NAME }}"
          echo "üè∑Ô∏è  Version: ${{ steps.setup.outputs.VERSION }}"
          echo "üîó Repository: https://github.com/${{ env.SPM_REPO }}"
          echo "üìã Checksum: ${{ steps.package.outputs.CHECKSUM }}"


      - name: Clean build artifacts from main repo
        run: |
          # Remove ONLY build artifacts
          rm -rf target/  # Rust build artifacts
          rm -rf ContextRuntime/  # cargo-swift output directory
          rm -f *.xcframework.zip  # Zipped framework if any
          
          # Verify what's being kept (for debugging)
          echo "Remaining files in main repo:"
          ls -la
          
          # Optional: Commit the cleanup if you want
          git add -u
          if ! git diff-index --quiet HEAD --; then
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git commit -m "Clean build artifacts after release"
            git push origin main
          fi
